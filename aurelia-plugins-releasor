#!/bin/bash

aurelia-plugin-releaser() {

  if [ "$1" == "-v" ]; then
    verbose=0; shift
  fi

  for path in $@; do
    #convert relative paths to full ones
    readlink -f $path
  done | while read abs_path; do

    cd "$abs_path" || error "$abs_path is not a directory"

    run git pull origin master

    run git pull upstream master

    run test -f gulpfile.js

    run npm install

    run "(test ! -f config.js || rm config.js; exit 0)"

    run jspm install -y

    (run gulp lint) || warning has lint errors

    test -d dist && run gulp clean && run git rm -rf dist

    run mkdir -p doc

    run gulp prepare-release

    local version=$(node -p -e "require('./package.json').version")

    run "git branch -D $version || info branch $version does not exist"

    run git checkout -b "$version"

    run git add dist/* package.json config.js

    run git add doc/CHANGELOG.md doc/api.json

    run "git commit -m \"chore(build): version: $version\""

    ask git push --set-upstream origin $version

    run git checkout master

  done
}

ask() {
  # http://djm.me/ask
  while true; do
    if [ "${2:-}" = "Y" ]; then
      prompt="Y/n"
      default=Y
    elif [ "${2:-}" = "N" ]; then
      prompt="y/N"
      default=N
    else
      prompt="y/N"
      default=N
    fi
    # Ask the question (not using "read -p" as it uses stderr not stdout)
    echo -en "\nASK\t$@ [$prompt] "
    # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
    read REPLY </dev/tty
    # Default?
    if [ -z "$REPLY" ]; then
      REPLY=$default
    fi
    # Check if the reply is valid
    case "$REPLY" in
      Y*|y*) run "$@" && return 0 ;;
      N*|n*) exit 1 ;;
    esac
    return 1
done
}

run() {
  info "$@"
  if [ $verbose -eq 0 ]; then
    eval "$@" || error "$tmp"
  else
    eval "$@" &>> "$tmp" || error "$tmp"
  fi
  succes "$@"
  return 0
}

info() {
  local blue='\033[0;34m'
  local nc='\033[0m' # no color
  echo -e "${blue}info$nc\t$@"
  return 0
}

succes() {
  local green='\033[1;32m'
  local nc='\033[0m' # no color
  echo -e "${green}succes$nc\t$@"
  return 0
}

warning() {
  local yellow='\033[1;33m'
  local nc='\033[0m' # no color
  echo -e "${yellow}warning$nc\t$@"
  return 0
}

error() {
  local red='\033[0;31m'
  local nc='\033[0m' # no color
  echo -e "${red}error$nc\t$@"
  tail "$tmp"
  exit 1
}

if [ $# -eq 0 ]; then

echo -e """
  DESCIPTION

        Takes the paths of the projects you want to prepare for a release as arguments.
        Be carefull with paths containing spaces. Escape them properly.

  OPTIONS

        -v
                pass -v as the first argument to show outputs of the commands

  """
  exit 0
fi

tmp=`mktemp`
verbose=1

aurelia-plugin-releaser "$@"
